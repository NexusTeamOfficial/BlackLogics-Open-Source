package com.tyron.compiler;

import com.tyron.compiler.exception.CompilerException;
import com.apk.builder.FileUtil;
import com.apk.builder.util.Decompress;
import com.apk.builder.model.Project;
import com.apk.builder.model.Library;
import com.apk.builder.ApplicationLoader;
import org.eclipse.jdt.internal.compiler.batch.Main;

import com.besome.blacklogics.DesignActivity;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.JarFile;
import java.util.Enumeration;
import java.util.jar.JarEntry;

public class ECJCompiler extends Compiler {
	private static final String TAG = "ECJ";
	private Project mProject;
	
	public ECJCompiler(Project project) {
		mProject = project;
		setProject(project); // Set the project for the parent Compiler class
	}
	
	@Override
	public void prepare() {
		mProject.getLogger().d(TAG, "Preparing ECJCompiler");
	}
	
	@Override
	public void enableAndroidX() throws CompilerException, IOException {
		if (mProject == null) {
			throw new CompilerException("Project not set for ECJCompiler");
		}
		
		onProgressUpdate("Enabling AndroidX support for ECJ...");
		mProject.getLogger().d(TAG, "Enabling AndroidX for ECJ compilation");
		
		String assetsAndroidXPath = "androidx";
		String destinationPath = ApplicationLoader.applicationContext.getFilesDir() + "/temp/androidx";
		File destinationDir = new File(destinationPath);
		
		if (!destinationDir.exists() && !destinationDir.mkdirs()) {
			throw new CompilerException("Failed to create AndroidX directory: " + destinationPath);
		}
		
		try {
			Decompress.unzipFromAssets(ApplicationLoader.applicationContext, assetsAndroidXPath + ".zip", destinationPath);
			mProject.getLogger().d(TAG, "Extracted AndroidX libraries to: " + destinationPath);
		} catch (Exception e) {
			mProject.getLogger().e(TAG, "Failed to extract AndroidX libraries: " + e.getMessage());
			throw new CompilerException("Failed to extract AndroidX libraries: " + e.getMessage());
		}
		
		List<Library> androidxLibraries = Library.fromFile(destinationDir);
		if (androidxLibraries.isEmpty()) {
			mProject.getLogger().e(TAG, "No AndroidX libraries found in: " + destinationPath);
			throw new CompilerException("No AndroidX libraries found in: " + destinationPath);
		}
		
		boolean appCompatFound = false;
		for (Library lib : androidxLibraries) {
			File classJar = lib.getClassJarFile();
			mProject.getLogger().d(TAG, "Processing library: " + lib.getName() + ", classes.jar: " + classJar.getAbsolutePath());
			if (classJar.exists() && lib.getName().contains("appcompat")) {
				try (JarFile jarFile = new JarFile(classJar)) {
					boolean foundAppCompatActivity = false;
					Enumeration<JarEntry> entries = jarFile.entries();
					while (entries.hasMoreElements()) {
						JarEntry entry = entries.nextElement();
						String entryName = entry.getName();
						if (entryName.equals("androidx/appcompat/app/AppCompatActivity.class")) {
							foundAppCompatActivity = true;
							appCompatFound = true;
							mProject.getLogger().d(TAG, "Found AppCompatActivity.class in " + lib.getName());
							break;
						}
					}
					if (!foundAppCompatActivity) {
						mProject.getLogger().e(TAG, "AppCompatActivity.class NOT found in " + lib.getName() + " classes.jar");
					}
				} catch (IOException e) {
					mProject.getLogger().e(TAG, "Failed to read classes.jar for " + lib.getName() + ": " + e.getMessage());
					throw new CompilerException("Failed to read classes.jar for " + lib.getName() + ": " + e.getMessage());
				}
			}
		}
		
		if (!appCompatFound) {
			mProject.getLogger().e(TAG, "No valid AppCompat library found with AppCompatActivity.class");
			throw new CompilerException("No valid AppCompat library found with AppCompatActivity.class");
		}
		
		// Add AndroidX libraries to the existing project libraries without overwriting
		List<Library> projectLibraries = mProject.getLibraries();
		if (projectLibraries == null) {
			projectLibraries = new ArrayList<>();
			mProject.setLibraries(projectLibraries); // Initialize if null
		}
		// Add only new AndroidX libraries, avoiding duplicates
		for (Library androidxLibrary : androidxLibraries) {
			if (!projectLibraries.contains(androidxLibrary)) { // Check for duplicates
				projectLibraries.add(androidxLibrary);
			}
		}
		
		mProject.getLogger().d(TAG, "Added " + androidxLibraries.size() + " AndroidX libraries to project");
		onProgressUpdate("AndroidX libraries enabled successfully for ECJ");
	}
	
	@Override
	public void run() throws CompilerException {
		onProgressUpdate("Compiling Java files...");
		mProject.getLogger().d(TAG, "Running ECJ compilation...");
		
		boolean isAndroidXEnabled = DesignActivity.complex.getAndroidXEnable();
		mProject.getLogger().d(TAG, "AndroidX enabled for ECJ: " + isAndroidXEnabled);
		if (isAndroidXEnabled) {
			try {
				enableAndroidX();
				mProject.getLogger().d(TAG, "AndroidX enabled for ECJ compilation");
			} catch (IOException e) {
				mProject.getLogger().e(TAG, "Failed to enable AndroidX: " + e.getMessage());
				throw new CompilerException("Failed to enable AndroidX: " + e.getMessage());
			}
		}
		
		CompilerOutputStream errorOutputStream = new CompilerOutputStream(new StringBuffer());
		PrintWriter errWriter = new PrintWriter(errorOutputStream);
		
		CompilerOutputStream outputStream = new CompilerOutputStream(new StringBuffer());
		PrintWriter outWriter = new PrintWriter(outputStream);
		
		ArrayList<String> args = new ArrayList<>();
		String javaVersion = "-21";
		args.add(javaVersion);
		mProject.getLogger().d(TAG, "Java source and target level: " + javaVersion);
		
		args.add("-proc:none");
		args.add("-nowarn");
		args.add("-d");
		File outputDir = new File(mProject.getOutputFile() + "/bin/classes/");
		outputDir.mkdirs();
		args.add(outputDir.getAbsolutePath());
		
		args.add("-cp");
		StringBuilder libraryString = new StringBuilder();
		libraryString.append(getAndroidJarFile().getAbsolutePath()).append(":");
		
		boolean hasValidLibraries = false;
		for (Library library : mProject.getLibraries()) {
			File classFile = library.getClassJarFile();
			mProject.getLogger().d(TAG, "Library: " + library.getName() + ", classes.jar: " + classFile.getAbsolutePath() + ", exists: " + classFile.exists());
			if (classFile.exists()) {
				libraryString.append(classFile.getAbsolutePath()).append(":");
				hasValidLibraries = true;
				if (library.getName().contains("appcompat")) {
					try (JarFile jarFile = new JarFile(classFile)) {
						boolean foundAppCompatActivity = false;
						Enumeration<JarEntry> entries = jarFile.entries();
						while (entries.hasMoreElements()) {
							JarEntry entry = entries.nextElement();
							if (entry.getName().equals("androidx/appcompat/app/AppCompatActivity.class")) {
								foundAppCompatActivity = true;
								mProject.getLogger().d(TAG, "Found AppCompatActivity.class in " + library.getName());
								break;
							}
						}
						if (!foundAppCompatActivity) {
							mProject.getLogger().e(TAG, "AppCompatActivity.class NOT found in " + library.getName() + " classes.jar");
						}
					} catch (IOException e) {
						mProject.getLogger().e(TAG, "Failed to read classes.jar for " + library.getName() + ": " + e.getMessage());
					}
				}
			} else {
				mProject.getLogger().w(TAG, "Skipping missing classes.jar for library: " + library.getName());
			}
		}
		
	/*	if (!hasValidLibraries) {
			mProject.getLogger().e(TAG, "No valid library classes.jar files found");
			throw new CompilerException("No valid library classes.jar files found");
		}*/
		
		libraryString.append(getLambdaFactoryFile().getAbsolutePath());
		mProject.getLogger().d(TAG, "Full ECJ classpath: " + libraryString.toString());
		args.add(libraryString.toString());
		
		args.add("-sourcepath");
		args.add(" ");
		
		for (File javaDir : mProject.getJavaFiles()) {
			if (javaDir.exists() && javaDir.isDirectory()) {
				for (File javaFile : getJavaFiles(javaDir)) {
					args.add(javaFile.getAbsolutePath());
					mProject.getLogger().d(TAG, "Adding source file: " + javaFile.getAbsolutePath());
				}
			}
		}
		
		File genDir = new File(mProject.getOutputFile() + "/gen");
		for (File resourceFile : getJavaFiles(genDir)) {
			args.add(resourceFile.getAbsolutePath());
			mProject.getLogger().d(TAG, "Adding generated source file: " + resourceFile.getAbsolutePath());
		}
		
		String[] command = args.toArray(new String[0]);
		mProject.getLogger().d(TAG, "ECJ Command: " + String.join(" ", command));
		
		Main main = new Main(outWriter, errWriter, false, null, null);
		try {
			main.compile(command);
		} catch (Exception e) {
			errWriter.flush();
			String errorMessage = errorOutputStream.buffer.toString();
			mProject.getLogger().e(TAG, "Compilation exception: " + e.getMessage() + ", output: " + errorMessage);
			throw new CompilerException(errorMessage.isEmpty() ? "Compilation failed: " + e.getMessage() : errorMessage + "\nException: " + e.getMessage());
		}
		
		errWriter.flush();
		outWriter.flush();
		String outputMessage = outputStream.buffer.toString();
		if (!outputMessage.isEmpty()) {
			mProject.getLogger().d(TAG, "Compiler output: " + outputMessage);
		}
		if (main.globalErrorsCount > 0) {
			String errorMessage = errorOutputStream.buffer.toString();
			mProject.getLogger().e(TAG, "Compilation failed: " + errorMessage);
			throw new CompilerException(errorMessage.isEmpty() ? "Compilation failed: No error details captured by compiler." : errorMessage);
		}
		
		mProject.getLogger().d(TAG, "ECJ compilation completed successfully");
	}
	
	private File getLambdaFactoryFile() {
		File check = new File(ApplicationLoader.applicationContext.getFilesDir() + "/temp/core-lambda-stubs.jar");
		if (check.exists()) {
			mProject.getLogger().d(TAG, "Using existing lambda factory: " + check.getAbsolutePath());
			return check;
		}
		Decompress.unzipFromAssets(ApplicationLoader.applicationContext, "core-lambda-stubs.zip", check.getParentFile().getAbsolutePath());
		mProject.getLogger().d(TAG, "Extracted lambda factory to: " + check.getAbsolutePath());
		return check;
	}
	
	private List<File> getJavaFiles(File dir) {
		List<File> files = new ArrayList<>();
		File[] childs = dir.listFiles();
		if (childs != null) {
			for (File child : childs) {
				if (child.isDirectory()) {
					files.addAll(getJavaFiles(child));
					continue;
				}
				if (child.getName().endsWith(".java")) {
					files.add(child);
				}
			}
		}
		return files;
	}
	
	private class CompilerOutputStream extends OutputStream {
		public StringBuffer buffer;
		
		public CompilerOutputStream(StringBuffer buffer) {
			this.buffer = buffer;
		}
		
		@Override
		public void write(int b) {
			buffer.append((char) b);
			if (b == '\n') {
				mProject.getLogger().d(TAG, buffer.toString());
			}
		}
		
		@Override
		public void flush() {
			if (buffer.length() > 0) {
				mProject.getLogger().d(TAG, buffer.toString());
			}
		}
	}
}
